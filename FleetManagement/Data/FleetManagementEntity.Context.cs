//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FleetManagement.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FleetManagementDb : DbContext
    {
        public FleetManagementDb()
            : base("name=FleetManagementDb")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Vehicle> Vehicles { get; set; }
    
        public virtual int spCreateVehicle(string plate, string make, string mode, Nullable<System.DateTime> createTime, string driver)
        {
            var plateParameter = plate != null ?
                new ObjectParameter("plate", plate) :
                new ObjectParameter("plate", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var createTimeParameter = createTime.HasValue ?
                new ObjectParameter("createTime", createTime) :
                new ObjectParameter("createTime", typeof(System.DateTime));
    
            var driverParameter = driver != null ?
                new ObjectParameter("driver", driver) :
                new ObjectParameter("driver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateVehicle", plateParameter, makeParameter, modeParameter, createTimeParameter, driverParameter);
        }
    
        public virtual ObjectResult<spGetAllVehicles_Result> spGetAllVehicles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllVehicles_Result>("spGetAllVehicles");
        }
    
        public virtual int spDeleteVehicle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteVehicle", idParameter);
        }
    
        public virtual int spEditVehicle(Nullable<int> id, string plate, string make, string mode, Nullable<System.DateTime> createTime, string driver)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var plateParameter = plate != null ?
                new ObjectParameter("plate", plate) :
                new ObjectParameter("plate", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var createTimeParameter = createTime.HasValue ?
                new ObjectParameter("createTime", createTime) :
                new ObjectParameter("createTime", typeof(System.DateTime));
    
            var driverParameter = driver != null ?
                new ObjectParameter("driver", driver) :
                new ObjectParameter("driver", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEditVehicle", idParameter, plateParameter, makeParameter, modeParameter, createTimeParameter, driverParameter);
        }
    
        public virtual ObjectResult<spGetCurrentVehicle_Result> spGetCurrentVehicle(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCurrentVehicle_Result>("spGetCurrentVehicle", idParameter);
        }
    }
}
